"""
Reads a list of package names from 'requirements.in', finds the currently
installed version for each, and generates a 'requirements.txt' file in the
format 'package>=version'.
"""
import sys
import os
import importlib.metadata

INPUT_FILENAME = "requirements.in"
OUTPUT_FILENAME = "requirements.txt"

def generate_requirements():
    """Main function to generate the requirements file."""
    
    # Check if the input file exists
    if not os.path.exists(INPUT_FILENAME):
        print(f"ERROR: Input file '{INPUT_FILENAME}' not found.", file=sys.stderr)
        print("Please create it and list your direct dependencies, one per line.", file=sys.stderr)
        sys.exit(1)

    print(f"Reading base packages from '{INPUT_FILENAME}'...")
    
    with open(INPUT_FILENAME, "r") as f:
        # Read lines, strip whitespace, and filter out comments/empty lines
        package_names = [
            line.strip() for line in f 
            if line.strip() and not line.strip().startswith("#")
        ]

    output_lines = []
    print(f"Found {len(package_names)} packages to process. Finding versions...")

    for package_name in package_names:
        try:
            # Get the currently installed version of the package
            version = importlib.metadata.version(package_name)
            
            # Format the line as "package>=version"
            line = f"{package_name}>={version}"
            output_lines.append(line)
            print(f"  + {line}")
            
        except importlib.metadata.PackageNotFoundError:
            print(
                f"  !! WARNING: Package '{package_name}' is listed in {INPUT_FILENAME} "
                "but is NOT installed in this environment. It will be skipped.",
                file=sys.stderr
            )

    # Write the collected lines to the output file
    with open(OUTPUT_FILENAME, "w") as f:
        f.write("# This file was auto-generated by generate_reqs.py.\n")
        f.write(f"# To update, edit '{INPUT_FILENAME}' and re-run the script.\n\n")
        for line in output_lines:
            f.write(f"{line}\n")

    print(f"\nSuccessfully created '{OUTPUT_FILENAME}' with {len(output_lines)} packages.")

if __name__ == "__main__":
    generate_requirements()